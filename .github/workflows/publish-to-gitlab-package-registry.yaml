name: R-publish-to-GitLab-package-registry

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches v1.0.0, v2.1.3, etc.

jobs:
  publish-binary-to-GitLab:
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      fail-fast: false
      matrix:
        config:
          # - {os: ubuntu-latest,   platform: linux,   r: 'release'}
          # - {os: windows-latest,  platform: windows, r: 'release'}
          - {os: macos-latest,    platform: macos,   r: 'release'}

    steps:
      # 1) Checkout code
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2) Setup R for each platform
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      # 3) Setup Pandoc (needed for some packages)
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      # 4) Install system dependencies (Linux only)
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev

      # 5) Install system dependencies (macOS)
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Install common dependencies via Homebrew if needed
          brew install libxml2 openssl curl
          echo "macOS dependencies installed"

      # 6) Install system dependencies (Windows)
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          Rscript -e "options(repos = c(CRAN = 'https://cloud.r-project.org/'))"
          # Windows dependencies are usually handled by Rtools
          echo "Windows dependencies handled by Rtools"

      # 7) Extract version from tag
      - name: Extract version from tag and update DESCRIPTION
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      # 8) Generate DESCRIPTION from tag and template
      - name: Generate DESCRIPTION from tag and template
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp DESCRIPTION-template DESCRIPTION
          else
            mv DESCRIPTION-template DESCRIPTION
          fi
          VERSION="${{ steps.version.outputs.version }}"
          Rscript -e "install.packages('desc', repos = 'https://cloud.r-project.org/'); desc::desc_set_version('$VERSION')"
      
      # 9) Install R dependencies
      - name: Install R dependencies
        run: |
          Rscript -e "install.packages(c('devtools', 'desc', 'pkgbuild'))"
          Rscript -e "devtools::install_deps('.', dependencies = TRUE)"

      # 10) Install package
      - name: Install package
        run: |
          Rscript -e "devtools::install('.', build_vignettes = FALSE)"

      # 11) Extract package name
      - name: Extract package name
        id: package
        shell: bash
        run: |
          PACKAGE_NAME=$(Rscript -e "cat(desc::desc_get('Package'))" --slave)
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      # 12) Get platform info
      - name: Get platform info
        id: platform
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            PLATFORM_NAME="linux"
            R_PLATFORM=$(Rscript -e "cat(R.version\$platform)" --slave)
          elif [ "${{ runner.os }}" == "Windows" ]; then
            PLATFORM_NAME="windows"
            R_PLATFORM=$(Rscript -e "cat(R.version\$platform)" --slave)
          elif [ "${{ runner.os }}" == "macOS" ]; then
            PLATFORM_NAME="macos"
            R_PLATFORM=$(Rscript -e "cat(R.version\$platform)" --slave)
          fi
          echo "name=$PLATFORM_NAME" >> $GITHUB_OUTPUT
          echo "r_platform=$R_PLATFORM" >> $GITHUB_OUTPUT

      # 13) Build R package
      - name: Build R package
        id: build
        shell: bash
        run: |
          # Build binary package
          PACKAGE_NAME="${{ steps.package.outputs.name }}"
          VERSION="${{ steps.version.outputs.version }}"

          echo "PACKAGE_NAME=$PACKAGE_NAME"

          # Create platform-specific build directory and extract package
          if [ "${{ runner.os }}" == "Linux" ]; then
            BUILD_DIR="build/Linux"
            mkdir -p "$BUILD_DIR"
            
            Rscript -e "
            built_path <- devtools::build(pkg = '.', path = '.', binary = TRUE, manual = FALSE)
            cat('package_file=', basename(built_path), sep='')
            " > build_output.txt
            
            # Extract the filename from R output
            PACKAGE_FILE=$(grep "package_file=" build_output.txt | cut -d'=' -f2)
            
            # Verify file exists
            if [ ! -f "$PACKAGE_FILE" ]; then
              echo "Error: Package file $PACKAGE_FILE not found"
              exit 1
            fi
            
            # Extract package contents to build directory
            tar -xzf "$PACKAGE_FILE" -C "$BUILD_DIR"
            
            echo "filename=$PACKAGE_FILE" >> $GITHUB_OUTPUT
            echo "builddir=$BUILD_DIR" >> $GITHUB_OUTPUT
            
            echo "Built package: $PACKAGE_FILE"
            echo "Extracted to: $BUILD_DIR"
            ls -la "$BUILD_DIR"
            
          elif [ "${{ runner.os }}" == "Windows" ]; then
            BUILD_DIR="build/Windows"
            mkdir -p "$BUILD_DIR"
            
            R CMD INSTALL --build .
            # Extract output file
            PACKAGE_FILE=$(ls $PACKAGE_NAME*.*zip | head -n 1)

            # Verify file exists
            if [ ! -f "$PACKAGE_FILE" ]; then
              echo "Error: Package file $PACKAGE_FILE not found"
              exit 1
            fi

            # Extract package contents to build directory
            unzip -q "$PACKAGE_FILE" -d "$BUILD_DIR"
            
            echo "filename=$PACKAGE_FILE" >> $GITHUB_OUTPUT
            echo "builddir=$BUILD_DIR" >> $GITHUB_OUTPUT

            echo "Built package: $PACKAGE_FILE"
            echo "Extracted to: $BUILD_DIR"
            ls -la "$BUILD_DIR"
            
          elif [ "${{ runner.os }}" == "macOS" ]; then
            BUILD_DIR="build/MacOS"
            mkdir -p "$BUILD_DIR"
            
            Rscript -e "
            built_path <- devtools::build(pkg = '.', path = '.', binary = TRUE, manual = FALSE)
            cat('package_file=', basename(built_path), sep='')
            " > build_output.txt
            
            # Extract the filename from R output
            PACKAGE_FILE=$(grep "package_file=" build_output.txt | cut -d'=' -f2)
            
            # Verify file exists
            if [ ! -f "$PACKAGE_FILE" ]; then
              echo "Error: Package file $PACKAGE_FILE not found"
              exit 1
            fi
            
            # Extract package contents to build directory
            tar -xzf "$PACKAGE_FILE" -C "$BUILD_DIR"
            
            echo "filename=$PACKAGE_FILE" >> $GITHUB_OUTPUT
            echo "builddir=$BUILD_DIR" >> $GITHUB_OUTPUT
            
            echo "Built package: $PACKAGE_FILE"
            echo "Extracted to: $BUILD_DIR"
            ls -la "$BUILD_DIR"
          fi

      # 14) Upload to GitLab Package Registry  
      - name: Upload to GitLab Package Registry
        shell: bash
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
          GITLAB_URL: ${{ vars.GITLAB_URL || 'https://gitlab.com' }}
        run: |
          PACKAGE_NAME="${{ steps.package.outputs.name }}"
          VERSION="${{ steps.version.outputs.version }}"
          PLATFORM="${{ steps.platform.outputs.name }}"
          BUILD_DIR="${{ steps.build.outputs.builddir }}"
          
          echo "Uploading files from build directory: $BUILD_DIR"
          echo "Platform: $PLATFORM"
          
          # Upload all files preserving directory structure
          find "$BUILD_DIR" -type f | while read -r file; do
            # Get relative path from build directory
            if [[ "$OSTYPE" == "darwin"* ]] || [[ "${{ runner.os }}" == "macOS" ]]; then
              rel_path="${file#$BUILD_DIR/}"
            else
              if command -v realpath &> /dev/null && realpath --help 2>&1 | grep -q "\-\-relative-to"; then
                rel_path=$(realpath --relative-to="$BUILD_DIR" "$file")
              else
                rel_path="${file#$BUILD_DIR/}"
              fi
            fi
            
            # URL encode the path for GitLab (replace spaces and special chars)
            url_path=$(echo "$rel_path" | sed 's/ /%20/g' | sed 's/#/%23/g')
            filename=$(basename "$file")
            
            echo "Uploading: $file to path: $url_path"
            
            # Create the nested URL structure
            curl --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
                 --upload-file "$file" \
                 "$GITLAB_URL/api/v4/projects/$GITLAB_PROJECT_ID/packages/generic/$PACKAGE_NAME/$VERSION/$PLATFORM/$url_path"
          done
          
          echo "Successfully uploaded all files from $BUILD_DIR to GitLab Package Registry ($PLATFORM)"
          
          # Also upload the original package file
          ORIGINAL_PACKAGE="${{ steps.build.outputs.filename }}"
          if [ -f "$ORIGINAL_PACKAGE" ]; then
            curl --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
                 --upload-file "$ORIGINAL_PACKAGE" \
                 "$GITLAB_URL/api/v4/projects/$GITLAB_PROJECT_ID/packages/generic/$PACKAGE_NAME/$VERSION/$PLATFORM/$ORIGINAL_PACKAGE"
            echo "Also uploaded original package: $ORIGINAL_PACKAGE"
          fi