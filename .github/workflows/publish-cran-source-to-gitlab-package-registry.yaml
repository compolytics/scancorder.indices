name: R-publish-CRAN-source-to-GitLab-package-registry

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches v1.0.0, v2.1.3, etc.

jobs:
  publish-cran-source-to-GitLab:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: "4.5.0"
      
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install system dependencies 
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev
      
      - name: Extract version from tag and update DESCRIPTION
        id: version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Generate DESCRIPTION from tag and template
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp DESCRIPTION-template DESCRIPTION
          else
            mv DESCRIPTION-template DESCRIPTION
          fi
          VERSION="${{ steps.version.outputs.version }}"
          Rscript -e "install.packages('desc', repos = 'https://cloud.r-project.org/'); desc::desc_set_version('$VERSION')"

      - name: Install R dependencies
        run: |
          Rscript -e "install.packages(c('devtools', 'desc', 'pkgbuild'))"
          Rscript -e "devtools::install_deps('.', dependencies = TRUE)"

      - name: Install package
        run: |
          Rscript -e "devtools::install('.', build_vignettes = FALSE)"

      - name: Extract package name
        id: package
        shell: bash
        run: |
          PACKAGE_NAME=$(Rscript -e "cat(desc::desc_get('Package'))" --slave)
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
      
      - name: Build R package
        run: |
          PACKAGE_NAME="${{ steps.package.outputs.name }}"
          VERSION="${{ steps.version.outputs.version }}"

          echo "PACKAGE_NAME=$PACKAGE_NAME"

          # Build package
          Rscript -e "
          built_path <- devtools::build(pkg = '.', path = '.', manual = FALSE)
          cat('original_file=', basename(built_path), sep='')
          " > build_output.txt
          
          # Extract the original filename from R output
          ORIGINAL_FILE=$(grep "original_file=" build_output.txt | cut -d'=' -f2)
          
          # Create simplified filename
          SIMPLE_FILE="${PACKAGE_NAME}.tar.gz"
          
          # Rename the file
          mv "$ORIGINAL_FILE" "$SIMPLE_FILE"
          echo "filename=$SIMPLE_FILE" >> $GITHUB_OUTPUT
          
          # Verify file exists
          if [ ! -f "$SIMPLE_FILE" ]; then
            echo "Error: Package file $SIMPLE_FILE not found"
            exit 1
          fi
          
          echo "Built and renamed package: $SIMPLE_FILE"
          ls -la *.tar.gz
          
          mkdir -p upload/src/contrib
          mv *.tar.gz upload/src/contrib/

      - name: Generate PACKAGES index
        run: |
          R -e 'tools::write_PACKAGES("upload/src/contrib", type="source")'

      - name: Upload to GitLab Package Registry
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
          GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
          GITLAB_URL: ${{ vars.GITLAB_URL || 'https://gitlab.com' }}
        run: |
          PACKAGE_FILE="${{ steps.build.outputs.filename }}"
          PACKAGE_NAME="${{ steps.package.outputs.name }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          for file in upload/src/contrib/*; do
            FILENAME=$(basename "$file")
            echo "Uploading $FILENAME"
            curl --header "JOB-TOKEN: $GITLAB_TOKEN" \
                 --upload-file "$file" \
                 "${GITLAB_URL}/api/v4/projects/${GITLAB_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/src/contrib/${FILENAME}"
          done