% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scancorder_helpers.R
\docType{class}
\name{ScanCorderHelpers}
\alias{ScanCorderHelpers}
\title{ScanCorderHelpers R6 Class}
\format{
\code{\link[R6]{R6Class}} object.

Initialize the helper class (not needed for static methods)
Check if nested keys exist in a list/dictionary structure
}
\description{
A helper class containing static methods for parsing JSON input data, extracting
wavelengths, FWHM values, and processing channel masks with splitting support.
These methods are shared across decoder, meta, and calibration classes.
}
\details{
Channel Mask Splitting:
\itemize{
\item Value 0: Ignore sensor for this LED
\item Value 1: Use sensor with LED wavelength (binary behavior)
\item Value >1: Split sensor reading into separate feature with sensor wavelength
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ScanCorderHelpers-new}{\code{ScanCorderHelpers$new()}}
\item \href{#method-ScanCorderHelpers-nested_key_exists}{\code{ScanCorderHelpers$nested_key_exists()}}
\item \href{#method-ScanCorderHelpers-get_field_base}{\code{ScanCorderHelpers$get_field_base()}}
\item \href{#method-ScanCorderHelpers-convert_json_to_vector}{\code{ScanCorderHelpers$convert_json_to_vector()}}
\item \href{#method-ScanCorderHelpers-convert_json_to_matrix}{\code{ScanCorderHelpers$convert_json_to_matrix()}}
\item \href{#method-ScanCorderHelpers-extract_led_wavelengths}{\code{ScanCorderHelpers$extract_led_wavelengths()}}
\item \href{#method-ScanCorderHelpers-extract_sensor_wavelengths}{\code{ScanCorderHelpers$extract_sensor_wavelengths()}}
\item \href{#method-ScanCorderHelpers-extract_led_fwhm}{\code{ScanCorderHelpers$extract_led_fwhm()}}
\item \href{#method-ScanCorderHelpers-extract_sensor_fwhm}{\code{ScanCorderHelpers$extract_sensor_fwhm()}}
\item \href{#method-ScanCorderHelpers-extract_channel_mask}{\code{ScanCorderHelpers$extract_channel_mask()}}
\item \href{#method-ScanCorderHelpers-has_splitting}{\code{ScanCorderHelpers$has_splitting()}}
\item \href{#method-ScanCorderHelpers-extract_feature_wavelengths}{\code{ScanCorderHelpers$extract_feature_wavelengths()}}
\item \href{#method-ScanCorderHelpers-extract_feature_fwhm}{\code{ScanCorderHelpers$extract_feature_fwhm()}}
\item \href{#method-ScanCorderHelpers-process_sensor_values_with_splitting}{\code{ScanCorderHelpers$process_sensor_values_with_splitting()}}
\item \href{#method-ScanCorderHelpers-extract_sensor_configuration}{\code{ScanCorderHelpers$extract_sensor_configuration()}}
\item \href{#method-ScanCorderHelpers-ensure_list}{\code{ScanCorderHelpers$ensure_list()}}
\item \href{#method-ScanCorderHelpers-sanitize_field_name}{\code{ScanCorderHelpers$sanitize_field_name()}}
\item \href{#method-ScanCorderHelpers-filter_info_fields}{\code{ScanCorderHelpers$filter_info_fields()}}
\item \href{#method-ScanCorderHelpers-flatten_sample_json}{\code{ScanCorderHelpers$flatten_sample_json()}}
\item \href{#method-ScanCorderHelpers-clone}{\code{ScanCorderHelpers$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-new"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-nested_key_exists"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-nested_key_exists}{}}}
\subsection{Method \code{nested_key_exists()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$nested_key_exists(lst, keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lst}}{List or dictionary to check}

\item{\code{keys}}{Character vector of nested keys to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical indicating if all nested keys exist
Get a field value from device or external sensor info with fallback
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-get_field_base"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-get_field_base}{}}}
\subsection{Method \code{get_field_base()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$get_field_base(device_info, external_info, field_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{device_info}}{Device sensor info from JSON}

\item{\code{external_info}}{External sensor info (package metadata)}

\item{\code{field_name}}{Name of the field to retrieve}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Field value or NULL if not found
Convert JSON data to numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-convert_json_to_vector"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-convert_json_to_vector}{}}}
\subsection{Method \code{convert_json_to_vector()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$convert_json_to_vector(json_data, type = as.numeric)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{json_data}}{JSON data structure}

\item{\code{type}}{Conversion function (default: as.numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector
Convert JSON data to numeric matrix
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-convert_json_to_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-convert_json_to_matrix}{}}}
\subsection{Method \code{convert_json_to_matrix()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$convert_json_to_matrix(json_data, type = as.numeric)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{json_data}}{JSON data structure}

\item{\code{type}}{Conversion function (default: as.numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric matrix
Extract LED wavelengths from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_led_wavelengths"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_led_wavelengths}{}}}
\subsection{Method \code{extract_led_wavelengths()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_led_wavelengths(
  input_json,
  device_sensor_info,
  external_sensor_info
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of LED wavelengths
Extract sensor wavelengths from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_sensor_wavelengths"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_sensor_wavelengths}{}}}
\subsection{Method \code{extract_sensor_wavelengths()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_sensor_wavelengths(
  input_json,
  device_sensor_info,
  external_sensor_info
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of sensor wavelengths
Extract LED FWHM values from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_led_fwhm"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_led_fwhm}{}}}
\subsection{Method \code{extract_led_fwhm()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_led_fwhm(
  input_json,
  device_sensor_info,
  external_sensor_info
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of LED FWHM values or NULL
Extract sensor FWHM values from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_sensor_fwhm"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_sensor_fwhm}{}}}
\subsection{Method \code{extract_sensor_fwhm()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_sensor_fwhm(
  input_json,
  device_sensor_info,
  external_sensor_info
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of sensor FWHM values or NULL
Extract and validate channel mask from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_channel_mask"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_channel_mask}{}}}
\subsection{Method \code{extract_channel_mask()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_channel_mask(
  input_json,
  device_sensor_info,
  external_sensor_info,
  sensor_values,
  provided_mask = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}

\item{\code{sensor_values}}{Sensor values matrix for dimension checking}

\item{\code{provided_mask}}{Optional externally provided channel mask}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Channel mask matrix
Check if channel mask contains splitting values (values > 1)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-has_splitting"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-has_splitting}{}}}
\subsection{Method \code{has_splitting()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$has_splitting(channel_mask)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channel_mask}}{Channel mask matrix}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical indicating if splitting is enabled
Extract feature wavelengths considering channel mask splitting
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_feature_wavelengths"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_feature_wavelengths}{}}}
\subsection{Method \code{extract_feature_wavelengths()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_feature_wavelengths(
  input_json,
  device_sensor_info,
  external_sensor_info,
  channel_mask,
  average_sensor_values = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}

\item{\code{channel_mask}}{Channel mask matrix}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List with wavelengths and indices for output features
Extract feature FWHM values considering channel mask splitting
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_feature_fwhm"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_feature_fwhm}{}}}
\subsection{Method \code{extract_feature_fwhm()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_feature_fwhm(
  input_json,
  device_sensor_info,
  external_sensor_info,
  channel_mask,
  feature_info
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}

\item{\code{device_sensor_info}}{Device sensor information}

\item{\code{external_sensor_info}}{External sensor information}

\item{\code{channel_mask}}{Channel mask matrix}

\item{\code{feature_info}}{Feature information from extract_feature_wavelengths}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric vector of FWHM values corresponding to features
Process sensor values with channel mask (including splitting support)
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-process_sensor_values_with_splitting"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-process_sensor_values_with_splitting}{}}}
\subsection{Method \code{process_sensor_values_with_splitting()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$process_sensor_values_with_splitting(
  sensor_values,
  channel_mask,
  feature_info,
  average_sensor_values = FALSE,
  led_wavelengths = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sensor_values}}{LED×sensor matrix (rows=LEDs, cols=sensors)}

\item{\code{channel_mask}}{Channel mask matrix (rows=LEDs, cols=sensors)}

\item{\code{feature_info}}{Feature information from extract_feature_wavelengths}

\item{\code{average_sensor_values}}{Whether to average across sensors per LED for binary channels}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Processed feature values vector for one sample
Extract sensor configuration from JSON input
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-extract_sensor_configuration"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-extract_sensor_configuration}{}}}
\subsection{Method \code{extract_sensor_configuration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$extract_sensor_configuration(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List with device_sensor_info and external_sensor_info
Ensure input is a list, wrapping it if necessary
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-ensure_list"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-ensure_list}{}}}
\subsection{Method \code{ensure_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$ensure_list(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Input object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List
Sanitize field names by replacing problematic characters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-sanitize_field_name"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-sanitize_field_name}{}}}
\subsection{Method \code{sanitize_field_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$sanitize_field_name(field_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field_name}}{Field name to sanitize}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Sanitized field name
Filter info fields to keep only numeric or single string values
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-filter_info_fields"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-filter_info_fields}{}}}
\subsection{Method \code{filter_info_fields()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$filter_info_fields(info)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{info}}{Info object to filter}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Filtered info object with sanitized field names
Flatten a JSON structure containing multiple sample data, extracting metadata if available
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-flatten_sample_json"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-flatten_sample_json}{}}}
\subsection{Method \code{flatten_sample_json()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$flatten_sample_json(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{JSON input structure}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Flattened list of samples
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ScanCorderHelpers-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ScanCorderHelpers-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ScanCorderHelpers$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
