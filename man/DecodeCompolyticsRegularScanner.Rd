% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scancorder_regular_decode.R
\docType{class}
\name{DecodeCompolyticsRegularScanner}
\alias{DecodeCompolyticsRegularScanner}
\title{DecodeCompolyticsRegularScanner: Decodes Sensor data from Compolytics Regular ScanCorder}
\format{
\code{\link[R6]{R6Class}} object.
}
\description{
An R6 class designed to decode and calibrate raw sensor data from Compolytics scanners.
It supports JSON input, various calibration modes (two-point and multipoint), and optional sensor value masking and averaging.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{average_sensor_values}}{Logical. Whether to average sensor readings per LED's across sensor elements.}

\item{\code{channel_mask}}{Matrix. A binary mask indicating which channels are valid.

Create a new instance of the decoder.

This method initializes the decoder with optional parameters for averaging sensor values and a channel mask.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DecodeCompolyticsRegularScanner-new}{\code{DecodeCompolyticsRegularScanner$new()}}
\item \href{#method-DecodeCompolyticsRegularScanner-nested_key_exists}{\code{DecodeCompolyticsRegularScanner$nested_key_exists()}}
\item \href{#method-DecodeCompolyticsRegularScanner-calculate_calibration}{\code{DecodeCompolyticsRegularScanner$calculate_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-two_point_calibration}{\code{DecodeCompolyticsRegularScanner$two_point_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-multi_point_calibration}{\code{DecodeCompolyticsRegularScanner$multi_point_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-convert_json_to_vector}{\code{DecodeCompolyticsRegularScanner$convert_json_to_vector()}}
\item \href{#method-DecodeCompolyticsRegularScanner-convert_json_to_matrix}{\code{DecodeCompolyticsRegularScanner$convert_json_to_matrix()}}
\item \href{#method-DecodeCompolyticsRegularScanner-ensure_list}{\code{DecodeCompolyticsRegularScanner$ensure_list()}}
\item \href{#method-DecodeCompolyticsRegularScanner-sanitize_field_name}{\code{DecodeCompolyticsRegularScanner$sanitize_field_name()}}
\item \href{#method-DecodeCompolyticsRegularScanner-filter_info_fields}{\code{DecodeCompolyticsRegularScanner$filter_info_fields()}}
\item \href{#method-DecodeCompolyticsRegularScanner-flatten_sample_json}{\code{DecodeCompolyticsRegularScanner$flatten_sample_json()}}
\item \href{#method-DecodeCompolyticsRegularScanner-add_row_by_kv}{\code{DecodeCompolyticsRegularScanner$add_row_by_kv()}}
\item \href{#method-DecodeCompolyticsRegularScanner-trim_list_names}{\code{DecodeCompolyticsRegularScanner$trim_list_names()}}
\item \href{#method-DecodeCompolyticsRegularScanner-score}{\code{DecodeCompolyticsRegularScanner$score()}}
\item \href{#method-DecodeCompolyticsRegularScanner-clone}{\code{DecodeCompolyticsRegularScanner$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-new"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$new(
  average_sensor_values = FALSE,
  channel_mask = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{average_sensor_values}}{Logical. Whether to average sensor readings per LED's across sensor elements.}

\item{\code{channel_mask}}{Matrix. A binary mask indicating which channels are valid. If provided it will overwrite potentially sensor supplied info.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of DecodeCompolyticsRegularScanner.
Check if a nested key exists in a list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-nested_key_exists"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-nested_key_exists}{}}}
\subsection{Method \code{nested_key_exists()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$nested_key_exists(lst, keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{lst}}{A list or nested list structure to check}

\item{\code{keys}}{A vector of keys representing the nested path to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical value indicating whether the nested key path exists
Calculate calibration coefficients from calibration data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-calculate_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-calculate_calibration}{}}}
\subsection{Method \code{calculate_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$calculate_calibration(calibration_map)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calibration_map}}{A list containing calibration data points}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A 3D array of calibration coefficients
Two-point calibration: expects exactly one calibration measurement
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-two_point_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-two_point_calibration}{}}}
\subsection{Method \code{two_point_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$two_point_calibration(
  sensor_values,
  calibration_map
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sensor_values}}{A numeric matrix of sensor readings}

\item{\code{calibration_map}}{A list containing exactly one calibration measurement}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A calibrated numeric matrix
Multipoint calibration: uses several calibration measurements
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-multi_point_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-multi_point_calibration}{}}}
\subsection{Method \code{multi_point_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$multi_point_calibration(
  sensor_values,
  calibration_map
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sensor_values}}{A numeric matrix of sensor readings}

\item{\code{calibration_map}}{A list containing multiple calibration measurements}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A calibrated numeric matrix
Convert JSON data to numeric vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-convert_json_to_vector"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-convert_json_to_vector}{}}}
\subsection{Method \code{convert_json_to_vector()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$convert_json_to_vector(
  json_data,
  type = as.numeric
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{json_data}}{A list or data structure from JSON}

\item{\code{type}}{Function to convert data type (default: as.numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric vector
Convert JSON data frame to numeric matrix
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-convert_json_to_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-convert_json_to_matrix}{}}}
\subsection{Method \code{convert_json_to_matrix()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$convert_json_to_matrix(
  json_data,
  type = as.numeric
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{json_data}}{A list or data frame structure from JSON}

\item{\code{type}}{Function to convert data type (default: as.numeric)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric matrix
Ensure the input is a list, wrapping it if necessary
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-ensure_list"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-ensure_list}{}}}
\subsection{Method \code{ensure_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$ensure_list(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Input object to ensure is a list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list, either the original if already a list, or wrapped in a list
Sanitize field names by replacing problematic characters
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-sanitize_field_name"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-sanitize_field_name}{}}}
\subsection{Method \code{sanitize_field_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$sanitize_field_name(field_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field_name}}{A character string representing a field name to sanitize}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A sanitized field name safe for use in R
Filter info fields to keep only numeric or single string values
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-filter_info_fields"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-filter_info_fields}{}}}
\subsection{Method \code{filter_info_fields()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$filter_info_fields(info)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{info}}{A list containing information fields to filter}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A filtered list containing only numeric or single string values
Flatten a JSON structure containing multiple sample data, extracting metadata if available
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-flatten_sample_json"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-flatten_sample_json}{}}}
\subsection{Method \code{flatten_sample_json()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$flatten_sample_json(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{A list structure from parsed JSON containing sample data}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A flattened list with extracted metadata
Add a new row to a data frame using key-value pairs
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-add_row_by_kv"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-add_row_by_kv}{}}}
\subsection{Method \code{add_row_by_kv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$add_row_by_kv(df, kv_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{df}}{A data frame to add a row to}

\item{\code{kv_list}}{A list of key-value pairs to add as a new row}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated data frame with the new row added
Trim white space from names in a list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-trim_list_names"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-trim_list_names}{}}}
\subsection{Method \code{trim_list_names()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$trim_list_names(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{A list whose names should be trimmed of whitespace}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The list with trimmed names
The main method: given a JSON string with sensor data, generate a reflectance vector
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-score"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-score}{}}}
\subsection{Method \code{score()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$score(transform_input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transform_input}}{A JSON string containing sensor data and configuration}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list containing metadata table, reflectance data, wavelengths, and FWHM values
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
