% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scancorder_regular_decode.R
\docType{class}
\name{DecodeCompolyticsRegularScanner}
\alias{DecodeCompolyticsRegularScanner}
\title{DecodeCompolyticsRegularScanner: Decodes Sensor data from Compolytics Regular ScanCorder}
\format{
\code{\link[R6]{R6Class}} object.
}
\description{
An R6 class designed to decode and calibrate raw sensor data from Compolytics scanners.
It supports JSON input, various calibration modes (two-point and multipoint), and optional sensor value masking and averaging.
}
\section{Methods}{

\describe{
\item{\code{new(average_sensor_values = FALSE, channel_mask = NULL)}}{Creates a new instance of the decoder.}
\item{\code{initialize(average_sensor_values = FALSE, channel_mask = NULL)}}{Initializes the decoder with optional averaging and channel mask.}
\item{\code{nested_key_exists(lst, keys)}}{Check if a nested key exists within a list.}
\item{\code{calculate_calibration(calibration_map)}}{Fit quadratic calibration model across multiple reference measurements.}
\item{\code{two_point_calibration(sensor_values, calibration_map)}}{Apply single-reference (two-point) calibration.}
\item{\code{multi_point_calibration(sensor_values, calibration_map)}}{Apply quadratic multipoint calibration from multiple reference measurements.}
\item{\code{convert_json_to_vector(json_data, type = as.numeric)}}{Convert a nested JSON structure to a numeric vector.}
\item{\code{convert_json_to_matrix(json_data, type = as.numeric)}}{Convert nested JSON arrays to a numeric matrix.}
\item{\code{ensure_list(x)}}{Ensure the input is a list, wrapping it if necessary.}
\item{\code{flatten_sample_json(input_json)}}{Flatten a JSON structure containing sample data, extracting metadata if available.}
\item{\code{add_row_by_kv(df, kv_list)}}{Add a new row to a data frame using key-value pairs.}
\item{\code{trim_list_names(x)}}{Trim whitespace from names in a list.}
\item{\code{score(transform_input)}}{Main method. Decodes a JSON string or file with sensor data and returns a reflectance vector.}
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{average_sensor_values}}{Logical. Whether to average sensor readings per LED's across sensor elements.}

\item{\code{channel_mask}}{Matrix. A binary mask indicating which channels are valid. If provided it will overwrite potentially sensor supplied info.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DecodeCompolyticsRegularScanner-new}{\code{DecodeCompolyticsRegularScanner$new()}}
\item \href{#method-DecodeCompolyticsRegularScanner-nested_key_exists}{\code{DecodeCompolyticsRegularScanner$nested_key_exists()}}
\item \href{#method-DecodeCompolyticsRegularScanner-calculate_calibration}{\code{DecodeCompolyticsRegularScanner$calculate_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-two_point_calibration}{\code{DecodeCompolyticsRegularScanner$two_point_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-multi_point_calibration}{\code{DecodeCompolyticsRegularScanner$multi_point_calibration()}}
\item \href{#method-DecodeCompolyticsRegularScanner-convert_json_to_vector}{\code{DecodeCompolyticsRegularScanner$convert_json_to_vector()}}
\item \href{#method-DecodeCompolyticsRegularScanner-convert_json_to_matrix}{\code{DecodeCompolyticsRegularScanner$convert_json_to_matrix()}}
\item \href{#method-DecodeCompolyticsRegularScanner-ensure_list}{\code{DecodeCompolyticsRegularScanner$ensure_list()}}
\item \href{#method-DecodeCompolyticsRegularScanner-flatten_sample_json}{\code{DecodeCompolyticsRegularScanner$flatten_sample_json()}}
\item \href{#method-DecodeCompolyticsRegularScanner-add_row_by_kv}{\code{DecodeCompolyticsRegularScanner$add_row_by_kv()}}
\item \href{#method-DecodeCompolyticsRegularScanner-trim_list_names}{\code{DecodeCompolyticsRegularScanner$trim_list_names()}}
\item \href{#method-DecodeCompolyticsRegularScanner-score}{\code{DecodeCompolyticsRegularScanner$score()}}
\item \href{#method-DecodeCompolyticsRegularScanner-clone}{\code{DecodeCompolyticsRegularScanner$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-new"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$new(
  average_sensor_values = FALSE,
  channel_mask = NULL
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-nested_key_exists"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-nested_key_exists}{}}}
\subsection{Method \code{nested_key_exists()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$nested_key_exists(lst, keys)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-calculate_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-calculate_calibration}{}}}
\subsection{Method \code{calculate_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$calculate_calibration(calibration_map)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-two_point_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-two_point_calibration}{}}}
\subsection{Method \code{two_point_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$two_point_calibration(
  sensor_values,
  calibration_map
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-multi_point_calibration"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-multi_point_calibration}{}}}
\subsection{Method \code{multi_point_calibration()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$multi_point_calibration(
  sensor_values,
  calibration_map
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-convert_json_to_vector"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-convert_json_to_vector}{}}}
\subsection{Method \code{convert_json_to_vector()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$convert_json_to_vector(
  json_data,
  type = as.numeric
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-convert_json_to_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-convert_json_to_matrix}{}}}
\subsection{Method \code{convert_json_to_matrix()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$convert_json_to_matrix(
  json_data,
  type = as.numeric
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-ensure_list"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-ensure_list}{}}}
\subsection{Method \code{ensure_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$ensure_list(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-flatten_sample_json"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-flatten_sample_json}{}}}
\subsection{Method \code{flatten_sample_json()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$flatten_sample_json(input_json)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-add_row_by_kv"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-add_row_by_kv}{}}}
\subsection{Method \code{add_row_by_kv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$add_row_by_kv(df, kv_list)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-trim_list_names"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-trim_list_names}{}}}
\subsection{Method \code{trim_list_names()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$trim_list_names(x)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-score"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-score}{}}}
\subsection{Method \code{score()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$score(transform_input)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DecodeCompolyticsRegularScanner-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DecodeCompolyticsRegularScanner-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DecodeCompolyticsRegularScanner$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
